name: Build release packages

on:
  release:
    types: ["published"]

jobs:
  Release:
    name: ${{ matrix.os.name }} | ${{ matrix.arch.name }}
    if: ${{ github.repository == 'Russian-Doom/russian-doom' && !startsWith(github.ref_name, 'dos-') }}
    runs-on: ${{ matrix.os.runner }}
    strategy:
      fail-fast: true
      matrix:
        config:
          -
            display_name: "Windows | x86 | GCC"
            runner: "windows-2022"
            shell: "msys2 {0}"
            msys_msystem: "MINGW32"
            msys_prefix: "i686"
            compiler_name: "gcc"
            cmake_gen: "Ninja"
            build_suffix: "x86"
          -
            display_name: "Windows | x64 | GCC"
            runner: "windows-2022"
            shell: "msys2 {0}"
            msys_msystem: "UCRT64"
            msys_prefix: "ucrt-x86_64"
            compiler_name: "gcc"
            cmake_gen: "Ninja"
            build_suffix: "x64"

    permissions:
      contents: write
    defaults:
      run:
        shell: ${{ matrix.config.shell }}
    steps:
      - name: Setup MSYS env
        if: runner.os == 'Windows'
        timeout-minutes: 10
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.config.msys_msystem }}
          update: true
          install: >-
            mingw-w64-${{ matrix.config.msys_prefix }}-pkgconf
            mingw-w64-${{ matrix.config.msys_prefix }}-${{ matrix.compiler.name }}
            mingw-w64-${{ matrix.config.msys_prefix }}-ninja
            mingw-w64-${{ matrix.config.msys_prefix }}-cmake
            mingw-w64-${{ matrix.config.msys_prefix }}-SDL2
            mingw-w64-${{ matrix.config.msys_prefix }}-SDL2_net
            mingw-w64-${{ matrix.config.msys_prefix }}-SDL2_mixer
            mingw-w64-${{ matrix.config.msys_prefix }}-libsamplerate

      - uses: actions/checkout@v3

      - name: Configure
        id: configure
        run: |
          compile_doom="OFF"
          compile_heretic="OFF"
          compile_hexen="OFF"
          if [[ ${{ contains(github.ref_name, '-') }} == true ]]
          then
              game=$( echo "${{ github.ref_name }}" | cut -d'-' -f1 )
              version=$( echo "${{ github.ref_name }}" | cut -d'-' -f2 )
              if [[ $game == "heretic" ]]
              then
                  compile_heretic="ON"
              elif [[ $game == "hexen" ]]
              then
                  compile_hexen="ON"
              fi
          else
              compile_doom="ON"
              game="doom"
              version="${{ github.ref_name }}"
          fi
          echo "game=$game" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          cmake -G "${{ matrix.config.cmake_gen }}" ${{ matrix.config.cmake_opts }} \
                -D RD_COMPILE_DOOM="$compile_doom" \
                -D RD_COMPILE_HERETIC="$compile_heretic" \
                -D RD_COMPILE_HEXEN="$compile_hexen" \
                -D RD_BUILD_VERSION_OVERWRITE="$version" \
                -D CMAKE_BUILD_TYPE=Release \
                -S . -B build

      - name: Build
        run: |
          export MAKEFLAGS=--keep-going
          cmake --build build --parallel 2

      - name: Package Zip
        if: runner.os == 'Windows'
        run: |
          cd build
          cpack -G ZIP

      - name: Upload Zip
        if: runner.os == 'Windows'
        shell: bash
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          gh release upload ${{ github.event.release.tag_name }} ./build/inter-${{ steps.configure.outputs.game }}-${{ steps.configure.outputs.version }}-windows-${{ matrix.config.build_suffix }}.zip
          gh release upload ${{ github.event.release.tag_name }} ./build/inter-${{ steps.configure.outputs.game }}-${{ steps.configure.outputs.version }}-windows-${{ matrix.config.build_suffix }}.zip.sha256
